name: Build Docker release images

on:
  workflow_dispatch:
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
        
      - uses: actions/setup-node@v2
        with:
          node-version: "17"
          
      - name: Install and Build
        run: |
          npm install
          npm run build
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          
      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
        
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build-and-push Gramps web image to ECR
        env:
          REGISTRY:   ${{ steps.login-ecr.outputs.registry }}      # 12345678.dkr.ecr…
          REPO:       ${{ secrets.REPO_NAME }}                     # e.g. grampsweb
        run: |
          docker buildx build \
            --push \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --tag $REGISTRY/grampsweb:dt1 \
            --tag $REGISTRY/grampsweb:latest \
            -f Dockerfile.devel .
            
      - name: Clean up dangling images
        run: docker image prune -f -a    
        
      - name: tag and push release nginx image
        env:
          REGISTRY:   ${{ steps.login-ecr.outputs.registry }}      # 12345678.dkr.ecr…
          REPO:       ${{ secrets.REPO_NAME }}                     # e.g. grampsweb     
        run: |
          docker buildx build \
            --push \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --tag $REGISTRY/grampsjs:dt1 \
            --tag $REGISTRY/grampsjs:latest \
            -f Dockerfile.nginx .  
